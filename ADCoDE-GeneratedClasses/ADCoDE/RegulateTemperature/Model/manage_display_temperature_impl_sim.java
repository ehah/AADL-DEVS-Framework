/**
* generated by ADCoDE @ 2019-12-04 16:13:59
* This class represents DEVS atomic model for thread manage_display_temperature with manage_display_temperature.impl
**/
package RegulateTemperature;

import java.lang.*;
import GenCol.*;
import model.modeling.*;
import model.simulation.*;
import view.modeling.ViewableAtomic;
import view.simView.*;
import component.structuredEntities.*;
import component.Iso_Types.*;
	
public class manage_display_temperature_impl_sim extends ViewableAtomic {
			
	// entities
	protected stringEnt rm;
	protected stringEnt dt;
	
	// variables
	private stringEnt rgm =  new stringEnt("INIT");
	private current_temperature crt = new current_temperature(68.0, "Valid");
	private booleanEnt ust = new booleanEnt(false);
		private doubleEnt pd = new doubleEnt(100.0);
	private stringEnt unspecified_value =  new stringEnt("unspecified_value");
	
	//for port datatypes
	private IntRange display_temperature = new IntRange(68, 105, 0);//variable generated for future reference.
	
	public manage_display_temperature_impl_sim() {
		this("manage_display_temperature.impl");
	}
			
	public manage_display_temperature_impl_sim(String name) {
		super(name);
			 
		//input and output ports from and for other atomic/coupled models
		// it is recommended to use short names
				
		addInport("regulator_mode"); 
		addInport("current_temperature"); 
		addOutport("display_temperature"); 
		addOutport("unspecified_temp"); 

		//test input for standalone testing
		addTestInput("regulator_mode", new stringEnt("NORMAL"));
		addTestInput("regulator_mode", new stringEnt("INIT"));
		addTestInput("regulator_mode", new stringEnt("FAILED"));
		addTestInput("current_temperature", new current_temperature(102, "Valid"));
	}	
			
	public void initialize() {
		//Can be updated by the modeler 
		phase = "Start";
		sigma = 0.0;

	  	super.initialize();
	}
			
	public void deltint() {
		if (phaseIs("Start")) {
		  holdIn("Chk_Mode", pd.getv());
		}
		if (phaseIs("Chk_Mode")) {
		  holdIn("Set_Vars", 0.0);
		}
		if (phaseIs("Set_Vars")) {
		  holdIn("Chk_Mode", pd.getv());
		}
	}
			
	public void deltext(double e, message x) {
		Continue(e);
		
		if (phaseIs("Chk_Mode")) {
		 	for(int i=0; i<x.getLength(); i++) {
				if(messageOnPort(x, "regulator_mode", i)) {
			 	rgm = (stringEnt) x.getValOnPort("regulator_mode", i);
			 	holdIn("Chk_Mode", pd.getv());
				}
			}
		}
		if (phaseIs("Chk_Mode")) {
		 	for(int i=0; i<x.getLength(); i++) {
				if(messageOnPort(x, "current_temperature", i)) {
			 	crt = (current_temperature) x.getValOnPort("current_temperature", i);
			 	if(rgm.getv() == "NORMAL") 
			 			    	{ust.setv(false);}
			 				 else if(rgm.getv() == "INIT" || rgm.getv() == "FAILED")   
			 				 	{ust.setv(true);}
			 	holdIn("Set_Vars", 0.0);
				}
			}
		}
	}
			
	public message out() {
		message m = new message();
		
		if (phaseIs("Set_Vars"))
		 {
		 if(  ust.getv()!= true)
		 m.add(makeContent("display_temperature",  crt.get_t()));
		 }
		if (phaseIs("Set_Vars"))
		 {
		 if(  ust.getv()== true)
		 m.add(makeContent("unspecified_temp",  unspecified_value));
		 }
		
		return m;
	}
}

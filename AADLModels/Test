	/**
	* generated by ADCoDE @ 2019-09-07 22:10:38
	* manage_interfaceFailure_desiredRange.impl is an atomic model
	**/
	package RegulateTemperature;
	
	import java.lang.*;
	import GenCol.*;
	import model.modeling.*;
	import model.simulation.*;
	import view.modeling.ViewableAtomic;
	import view.simView.*;
	import aadlEntities.*;
	import Iso_Types.*;
	import Base_Types.*;
	/**
	* This class represents DEVS model for thread manage_interfaceFailure_desiredRange.impl
	**/
	
	public class manage_interfaceFailure_desiredRange_impl_sim extends ViewableAtomic {
		
		// entities
		
		protected doubleEnt ldt;   
		protected doubleEnt udt;   
		protected booleanEnt rif;   

		// variables
		private lower_desired_temperature ldt = new lower_desired_temperature(98, "Valid");
		private upper_desired_temperature udt = new upper_desired_temperature(99, "Valid");
		private booleanEnt rif = true;
				private doubleEnt pd = 100.0;
		
				
		private IntegerRange lower_desired_temp = new IntegerRange(96, 101, 98); //update 01
		addTestInput("lower_desired_temp", lower_desired_temp);   //update 01
		
		
		public manage_interfaceFailure_desiredRange_impl_sim () {  
			this("manage_interfaceFailure_desiredRange.impl");
		}
		
		public manage_interfaceFailure_desiredRange_impl_sim (String name) { 
			super(name);
			 
			//input and output ports from and for other atomic/coupled models
			// it is recommended to use short names
			
			addInport("lower_desired_temperature"); 
			addInport("upper_desired_temperature"); 
			addOutport("regulator_interface_failure"); 
			addOutport("lower_desired_temp"); 
			addOutport("upper_desired_temp"); 
			addOutport("unspecified_temp"); 
			
			//test input for standalone testing
			addTestInput("lower_desired_temperature", new lower_desired_temperature(97, "Valid")); 
			addTestInput("lower_desired_temperature", new lower_desired_temperature(100, "Invalid")); 
			addTestInput("upper_desired_temperature", new upper_desired_temperature(98, "Valid")); 
			addTestInput("upper_desired_temperature", new upper_desired_temperature(101, "Invalid")); 
			addTestInput("lower_desired_temp", lower_desired_temp); 
			addTestInput("regulator_interface_failure", true));
		}	
		
		public void initialize() {
			//Can be updated by the modeler 
			phase = "Start";
			sigma = 0.0;
		  	
		  	super.initialize();
		}
		
		public void deltint(){
		
			if (phaseIs("Start"))
			{
			 holdIn("Chk_Status", pd);
			}
			if (phaseIs("Set_Vars"))
			{
			 holdIn("Chk_Status", pd);
			}
		}
		
		public void deltext (double e, message x){
			
			Continue(e);
			
			if (phaseIs("Chk_Status")) 
			{
			 for(int i=0; i<x.getLength(); i++) 
				{
			 	if(messageOnPort(x, "lower_desired_temperature", i)) //update 02
			 		{
			 		ldt = (lower_desired_temperature) x.getValOnPort("lower_desired_temperature", i);
			 		if(ldt.getstatus() == 'Invalid' || udt.getstatus() == 'Invalid') 
			 				  	   		{rif.setv(true);}
			 					    else { rif.setv(false); }
			 					    	Continue; 
			 		holdIn("Set_Vars", 0.0);
					}
				}
			}	
			if (phaseIs("Chk_Status")) 
			{
			 for(int i=0; i<x.getLength(); i++) 
				{
			 	if(messageOnPort(x, "upper_desired_temperature", udt))
			 		{
			 		if(udt.getstatus() == 'Invalid' || ldt.getstatus() == 'Invalid') 
			 				  	   		{rif.setv(true);}
			 					    else { rif.setv(false); }
			 					      Continue; 
			 		holdIn("Set_Vars", 0.0);
					}
				}
			}	
	}
		
	public message out() {
		
		message m = new message();
		
		if (phaseIs("Set_Vars"))
		m.add(makeContent("regulator_interface_failure", new Bool(rif)));
		if (phaseIs("Set_Vars"))
		{				 
		 if(  rif.getv()!= true)
		 m.add(makeContent("lower_desired_temp", new lower_desired_range(ldt.t)));
		}
		if (phaseIs("Set_Vars"))
		{				 
		 if(  rif.getv()!= true)
		 m.add(makeContent("upper_desired_temp", new upper_desired_range(udt.t)));
		}
		if (phaseIs("Set_Vars"))
		{				 
		 if(  rif.getv()== true)
		 m.add(makeContent("unspecified_temp", new entity(unspecified_value)));
		}
		
	return m;
	}
		
	
}
